// TODO: TRY REDUCING NUMBER OF REQUESTS, MAKE A QUEUE THAT PRIORITIZES CERTAIN TABS OVER OTHERS, FIX FORMATTING ERROR WHEN VIDEO TITLE HAS QUOTATION MARKS
// MAIN VARIABLE INITIALIZATION
// document.getElementById("movie_player"); TRY MAKING USE OF THIS

const LOGGING = false;

const MAIN_JS_PATHS = {
    AD: "div.ytp-ad-player-overlay-instream-info",
    PLAYING: "#movie_player > div.ytp-chrome-bottom > div.ytp-chrome-controls > div.ytp-left-controls > button"
};
const MINIPLAYER_JS_PATHS = {
    AD: "div.ytp-ad-player-overlay-instream-info",
    TITLE: "#info-bar > div.metadata.style-scope.ytd-miniplayer > h1 > a > yt-formatted-string",
    PLAYING: "#movie_player > div.ytp-chrome-bottom > div.ytp-chrome-controls > div.ytp-left-controls > button"
};
const MUSIC_JS_PATHS = {
    AD: "div.ytp-ad-player-overlay-instream-info",
    PLAYING: "#play-pause-button"
};

const MESSAGE_NULL = "(%NULL%)";
const VIDEO_STREAM = "video-stream";
const YOUTUBE_MAIN_URL = "https://www.youtube.com";
const YOUTUBE_MUSIC_URL = "https://music.youtube.com";
const YOUTUBE_MAIN_PAUSE = "Pause (k)";
const YOUTUBE_MUSIC_PAUSE = "Pause";
const YOUTUBE_MAIN_WATCH_URL = "https://www.youtube.com/watch?v=";
const YOUTUBE_MUSIC_WATCH_URL = "https://music.youtube.com/watch?v=";
const PLAYLIST_KEY = "&list";

var port = chrome.runtime.connect({name: "document-data-pipe"});
var documentData = new Object(); // a key with the name "element" in it indicates it is stored in here as a raw HTML object, not as an immediately usable text or integer value

// LOGGING

if (LOGGING) {
    console.log("YouTubeDiscordPresence - content.js created");
}

// GET YOUTUBE OEMBED JSON DATA (https://stackoverflow.com/questions/30084140/youtube-video-title-with-api-v3-without-api-key)

function getVideoOEmbed(link, isMusic) {
    var startIndex = 32; // length of https://www.youtube.com/watch?v=
    if (isMusic) {
        startIndex = 34; // length of https://music.youtube.com/watch?v=
    }
    var playlistKeyLocation = link.indexOf(PLAYLIST_KEY);
    if (playlistKeyLocation != -1) {
        link = link.substring(startIndex, playlistKeyLocation);
    }
    else {
        link = link.substring(startIndex, link.length);
    }
    return ("https://www.youtube.com/oembed?url=http%3A//youtube.com/watch%3Fv%3D" + link + "&format=json");
}

// DATA REQUEST (https://stackoverflow.com/questions/2499567/how-to-make-a-json-call-to-an-url/2499647#2499647)

const getJSON = async url => {
    const response = await fetch(url);
    if (!response.ok) {
        throw new Error(response.statusText);
    }
    const data = response.json()
    return data;
}

// DOCUMENT SCANNING

function getYouTubeDataMain() {
    documentData.ad = document.querySelector(MAIN_JS_PATHS.AD);
    if (document.URL.startsWith(YOUTUBE_MAIN_WATCH_URL)) {
        getJSON(getVideoOEmbed(document.URL, false)).then(data => {
            if (LOGGING) {
                console.log(data);
            }
            documentData.title = data.title;
            documentData.author = data.author_name;
        }).catch(error => {
            console.error(error);
        });
    }
    else { // MINIPLAYER DOES NOT DISPLAY AUTHOR OR UNIQUE YOUTUBE LINK
        documentData.title = document.querySelector(MINIPLAYER_JS_PATHS.TITLE).innerText;
        documentData.author = null;
    }
    documentData.videoElement = document.getElementsByClassName(VIDEO_STREAM)[0]; // NOTE THE [0]
    documentData.playingElement = document.querySelector(MAIN_JS_PATHS.PLAYING);
}

function getYouTubeDataMusic() {
    documentData.ad = document.querySelector(MUSIC_JS_PATHS.AD);
    getJSON(getVideoOEmbed(document.URL, true)).then(data => {
        if (LOGGING) {
            console.log(data);
        }
        documentData.title = data.title;
        documentData.author = data.author_name;
    }).catch(error => {
        console.error(error);
    });
    documentData.videoElement = document.getElementsByClassName(VIDEO_STREAM)[0]; // NOTE THE [0]
    documentData.playingElement = document.querySelector(MUSIC_JS_PATHS.PLAYING);
}

// FUNCTION THAT CHECKS WHETHER OR NOT TO TRANSMIT DATA

function shouldTransmitData() {
    return (documentData.ad == null && documentData.title != null && documentData.videoElement != null && documentData.playingElement != null);
}

// CROSS SCRIPT COMMUNICATOR

var transmitterInterval = setInterval(function() {
    if (document.URL.startsWith(YOUTUBE_MAIN_URL)) {
        getYouTubeDataMain();
        if (shouldTransmitData() && documentData.playingElement.title == YOUTUBE_MAIN_PAUSE) {
            authorTemp = MESSAGE_NULL;
            if (documentData.author != null) {
                authorTemp = documentData.author;
            }
            port.postMessage({
                title: documentData.title,
                author: authorTemp,
                videoTime: parseInt(documentData.videoElement.currentTime),
                videoDuration: parseInt(documentData.videoElement.duration),
            });
            if (LOGGING) {
                console.log("Data was sent by content.js to background.js")
                console.log(documentData.title);
                if (documentData.author != null) {
                    console.log(documentData.author);
                }
                console.log(documentData.videoElement.currentTime);
                console.log(documentData.videoElement.duration);
            }
        }
    }
    else if (document.URL.startsWith(YOUTUBE_MUSIC_URL)) {
        getYouTubeDataMusic();
        if (shouldTransmitData() && documentData.playingElement.title == YOUTUBE_MUSIC_PAUSE) {
            port.postMessage({
                title: documentData.title,
                author: documentData.author,
                videoTime: parseInt(documentData.videoElement.currentTime),
                videoDuration: parseInt(documentData.videoElement.duration),
            });
            if (LOGGING) {
                console.log("Data was sent by content.js to background.js")
                console.log(documentData.title);
                console.log(documentData.author);
                console.log(documentData.videoElement.currentTime);
                console.log(documentData.videoElement.duration);
            }
        }
    }
}, 1000);